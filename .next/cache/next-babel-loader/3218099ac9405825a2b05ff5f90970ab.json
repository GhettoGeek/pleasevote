{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react'; // Usage\n// function App() {\n//   // Similar to useState but first arg is key to the value in local storage.\n//   const [storageValue, setAddress] = useLocalStorage('name', 'Bob');\n//   return (\n//     <div>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter your name\"\n//         value={name}\n//         onChange={e => setStorageValue(e.target.value)}\n//       />\n//     </div>\n//   );\n// }\n// Hook\n\nexport function useLocalStorage(key, initialValue) {\n  _s();\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  var _useState = useState(function () {\n    try {\n      // Get from local storage by key\n      var item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.error(error);\n      return initialValue;\n    }\n  }),\n      storedValue = _useState[0],\n      setStoredValue = _useState[1]; // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n\n  var setValue = function setValue(value) {\n    try {\n      // Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  var getValue = function getValue(value) {\n    try {\n      // Allow value to be a function so we have same API as useState\n      var valueToGet = value instanceof Function ? value(storedValue) : value; // Save state\n\n      getStoredValue(valueToGet); // Save to local storage\n\n      JSON.stringify(window.localStorage.getItem(key, valueToGet));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n_s(useLocalStorage, \"8d/ls6M2yZtMY6MmvOSyE8jmU1E=\");","map":{"version":3,"sources":["/home/avery/Projects/next-google-api/Components/Hooks/useLocalStorage.js"],"names":["useState","useLocalStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify","log","getValue","valueToGet","getStoredValue"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4C;AAAA;;AACjD;AACA;AAFiD,kBAGXH,QAAQ,CAAC,YAAM;AACnD,QAAI;AACF;AACA,UAAMI,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CAAb,CAFE,CAGF;;AACA,aAAOE,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBD,YAAjC;AACD,KALD,CAKE,OAAOO,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,aAAOP,YAAP;AACD;AACF,GAX6C,CAHG;AAAA,MAG1CS,WAH0C;AAAA,MAG7BC,cAH6B,iBAgBjD;AACA;;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAC1B,QAAI;AACF;AACA,UAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACH,WAAD,CAAjC,GAAiDG,KADnD,CAFE,CAIF;;AACAF,MAAAA,cAAc,CAACG,YAAD,CAAd,CALE,CAMF;;AACAX,MAAAA,MAAM,CAACC,YAAP,CAAoBY,OAApB,CAA4BhB,GAA5B,EAAiCM,IAAI,CAACW,SAAL,CAAeH,YAAf,CAAjC;AACD,KARD,CAQE,OAAON,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACS,GAAR,CAAYV,KAAZ;AACD;AACF,GAbD;;AAeA,MAAMW,QAAQ,GAAG,SAAXA,QAAW,CAACN,KAAD,EAAW;AAC1B,QAAI;AACF;AACA,UAAMO,UAAU,GAAGP,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACH,WAAD,CAAjC,GAAiDG,KAApE,CAFE,CAGF;;AACAQ,MAAAA,cAAc,CAACD,UAAD,CAAd,CAJE,CAKF;;AACAd,MAAAA,IAAI,CAACW,SAAL,CAAed,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,EAAiCoB,UAAjC,CAAf;AACD,KAPD,CAOE,OAAOZ,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACS,GAAR,CAAYV,KAAZ;AACD;AACF,GAZD;;AAcA,SAAO,CAACE,WAAD,EAAcE,QAAd,CAAP;AACD;;GAhDeb,e","sourcesContent":["import { useState } from 'react';\n\n// Usage\n// function App() {\n//   // Similar to useState but first arg is key to the value in local storage.\n//   const [storageValue, setAddress] = useLocalStorage('name', 'Bob');\n\n//   return (\n//     <div>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter your name\"\n//         value={name}\n//         onChange={e => setStorageValue(e.target.value)}\n//       />\n//     </div>\n//   );\n// }\n\n// Hook\nexport function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.error(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  const getValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToGet = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      getStoredValue(valueToGet);\n      // Save to local storage\n      JSON.stringify(window.localStorage.getItem(key, valueToGet));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n"]},"metadata":{},"sourceType":"module"}