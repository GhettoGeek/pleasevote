{"ast":null,"code":"import { useState } from 'react'; // Usage\n// function App() {\n//   // Similar to useState but first arg is key to the value in local storage.\n//   const [storageValue, setAddress] = useLocalStorage('name', 'Bob');\n//   return (\n//     <div>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter your name\"\n//         value={name}\n//         onChange={e => setStorageValue(e.target.value)}\n//       />\n//     </div>\n//   );\n// }\n// Hook\n\nexport function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  var _useState = useState(function () {\n    try {\n      // Get from local storage by key\n      var item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.error(error);\n      return initialValue;\n    }\n  }),\n      storedValue = _useState[0],\n      setStoredValue = _useState[1]; // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n\n  var setValue = function setValue(value) {\n    try {\n      // Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  var getValue = function getValue(value) {\n    try {\n      // Allow value to be a function so we have same API as useState\n      var valueToGet = value instanceof Function ? value(storedValue) : value; // Save state\n\n      getStoredValue(valueToGet); // Save to local storage\n\n      JSON.stringify(window.localStorage.getItem(key, valueToGet));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}","map":null,"metadata":{},"sourceType":"module"}