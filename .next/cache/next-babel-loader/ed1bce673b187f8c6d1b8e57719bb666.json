{"ast":null,"code":"import { google } from 'googleapis';\nconst civic = google.civicinfo({\n  version: 'v2',\n  auth: process.env.GAPI_KEY\n});\nexport default (async ({\n  query: {\n    id\n  },\n  query: {\n    address\n  }\n}, res, error) => {\n  const info = await civic.elections.voterInfoQuery({\n    address,\n    electionId: id,\n    officialOnly: false,\n    returnAllAvailableData: true,\n    prettyPrint: true,\n    alt: 'json'\n  });\n\n  if (typeof info === 'object') {\n    return res.status(200).json(info);\n  } else {\n    return res.status(404).json({\n      message: `voterInfoQuery() for electionId: ${id} not found or unrecognized type`\n    });\n  }\n});","map":{"version":3,"sources":["/home/avery/Projects/next-google-api/pages/api/voterInfo.js"],"names":["google","civic","civicinfo","version","auth","process","env","GAPI_KEY","query","id","address","res","error","info","elections","voterInfoQuery","electionId","officialOnly","returnAllAvailableData","prettyPrint","alt","status","json","message"],"mappings":"AAAA,SAASA,MAAT,QAAuB,YAAvB;AAEA,MAAMC,KAAK,GAAGD,MAAM,CAACE,SAAP,CAAiB;AAC7BC,EAAAA,OAAO,EAAE,IADoB;AAE7BC,EAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAFW,CAAjB,CAAd;AAKA,gBAAe,OAAO;AAAEC,EAAAA,KAAK,EAAE;AAAEC,IAAAA;AAAF,GAAT;AAAiBD,EAAAA,KAAK,EAAE;AAAEE,IAAAA;AAAF;AAAxB,CAAP,EAA8CC,GAA9C,EAAmDC,KAAnD,KAA6D;AAC1E,QAAMC,IAAI,GAAG,MAAMZ,KAAK,CAACa,SAAN,CAAgBC,cAAhB,CAA+B;AAChDL,IAAAA,OADgD;AAEhDM,IAAAA,UAAU,EAAEP,EAFoC;AAGhDQ,IAAAA,YAAY,EAAE,KAHkC;AAIhDC,IAAAA,sBAAsB,EAAE,IAJwB;AAKhDC,IAAAA,WAAW,EAAE,IALmC;AAMhDC,IAAAA,GAAG,EAAE;AAN2C,GAA/B,CAAnB;;AASA,MAAI,OAAOP,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOF,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBT,IAArB,CAAP;AACD,GAFD,MAEO;AACL,WAAOF,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,MAAAA,OAAO,EAAG,oCAAmCd,EAAG;AADtB,KAArB,CAAP;AAGD;AACF,CAjBD","sourcesContent":["import { google } from 'googleapis';\n\nconst civic = google.civicinfo({\n  version: 'v2',\n  auth: process.env.GAPI_KEY,\n});\n\nexport default async ({ query: { id }, query: { address } }, res, error) => {\n  const info = await civic.elections.voterInfoQuery({\n    address,\n    electionId: id,\n    officialOnly: false,\n    returnAllAvailableData: true,\n    prettyPrint: true,\n    alt: 'json',\n  });\n\n  if (typeof info === 'object') {\n    return res.status(200).json(info);\n  } else {\n    return res.status(404).json({\n      message: `voterInfoQuery() for electionId: ${id} not found or unrecognized type`,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}