{"ast":null,"code":"import { useState } from 'react'; // Usage\n// function App() {\n//   // Similar to useState but first arg is key to the value in local storage.\n//   const [storageValue, setAddress] = useLocalStorage('name', 'Bob');\n//   return (\n//     <div>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter your name\"\n//         value={name}\n//         onChange={e => setStorageValue(e.target.value)}\n//       />\n//     </div>\n//   );\n// }\n// Hook\n\nexport function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const {\n    0: storedValue,\n    1: setStoredValue\n  } = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.error(error);\n      return initialValue;\n    }\n  }); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  const getValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToGet = value instanceof Function ? value(storedValue) : value; // Save state\n\n      getStoredValue(valueToGet); // Save to local storage\n\n      JSON.stringify(window.localStorage.getItem(key, valueToGet));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}","map":{"version":3,"sources":["/home/avery/Projects/next-google-api/Components/Hooks/useLocalStorage.js"],"names":["useState","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","setValue","value","valueToStore","Function","setItem","stringify","log","getValue","valueToGet","getStoredValue"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4C;AACjD;AACA;AACA,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCL,QAAQ,CAAC,MAAM;AACnD,QAAI;AACF;AACA,YAAMM,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BP,GAA5B,CAAb,CAFE,CAGF;;AACA,aAAOI,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBH,YAAjC;AACD,KALD,CAKE,OAAOS,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,aAAOT,YAAP;AACD;AACF,GAX6C,CAA9C,CAHiD,CAgBjD;AACA;;AACA,QAAMW,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAI;AACF;AACA,YAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACX,WAAD,CAAjC,GAAiDW,KADnD,CAFE,CAIF;;AACAV,MAAAA,cAAc,CAACW,YAAD,CAAd,CALE,CAMF;;AACAT,MAAAA,MAAM,CAACC,YAAP,CAAoBU,OAApB,CAA4BhB,GAA5B,EAAiCQ,IAAI,CAACS,SAAL,CAAeH,YAAf,CAAjC;AACD,KARD,CAQE,OAAOJ,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACO,GAAR,CAAYR,KAAZ;AACD;AACF,GAbD;;AAeA,QAAMS,QAAQ,GAAIN,KAAD,IAAW;AAC1B,QAAI;AACF;AACA,YAAMO,UAAU,GAAGP,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACX,WAAD,CAAjC,GAAiDW,KAApE,CAFE,CAGF;;AACAQ,MAAAA,cAAc,CAACD,UAAD,CAAd,CAJE,CAKF;;AACAZ,MAAAA,IAAI,CAACS,SAAL,CAAeZ,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BP,GAA5B,EAAiCoB,UAAjC,CAAf;AACD,KAPD,CAOE,OAAOV,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACO,GAAR,CAAYR,KAAZ;AACD;AACF,GAZD;;AAcA,SAAO,CAACR,WAAD,EAAcU,QAAd,CAAP;AACD","sourcesContent":["import { useState } from 'react';\n\n// Usage\n// function App() {\n//   // Similar to useState but first arg is key to the value in local storage.\n//   const [storageValue, setAddress] = useLocalStorage('name', 'Bob');\n\n//   return (\n//     <div>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter your name\"\n//         value={name}\n//         onChange={e => setStorageValue(e.target.value)}\n//       />\n//     </div>\n//   );\n// }\n\n// Hook\nexport function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.error(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  const getValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToGet = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      getStoredValue(valueToGet);\n      // Save to local storage\n      JSON.stringify(window.localStorage.getItem(key, valueToGet));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n"]},"metadata":{},"sourceType":"module"}