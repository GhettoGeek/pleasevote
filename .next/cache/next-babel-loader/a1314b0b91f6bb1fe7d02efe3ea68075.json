{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Fragment, useState } from 'react';\nimport Link from 'next/link';\nimport useSWR from 'swr';\nimport { Accordion, Button, Card } from 'react-bootstrap';\n\nconst PollingLocations = props => {\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(true);\n  const address = JSON.parse(window.localStorage.getItem('address'));\n  const id = window.localStorage.getItem('id');\n  console.log(address, id);\n  const url = `/api/voterInfo?id=${id}&address=${address}`;\n\n  const fetcher = url => fetch(url).then(r => r.json());\n\n  const {\n    data,\n    error\n  } = useSWR(url, fetcher);\n  if (error) return __jsx(\"div\", {\n    className: \"alert alert-danger\",\n    role: \"alert\"\n  }, __jsx(\"span\", {\n    className: \"sr-only\"\n  }, \"Failed to load data!\"));\n  if (!data) return __jsx(\"div\", {\n    className: \"spinner-border spinner-border-lg text-danger\",\n    role: \"status\",\n    style: {\n      margin: '10rem',\n      width: '20rem',\n      height: '20rem'\n    }\n  });\n\n  const handleIsOpen = () => setIsOpen(!isOpen);\n\n  if (data && data !== null & !data.data.pollingLocations || data.data.pollingLocations.length <= 0 || data.data.pollingLocations === null) {\n    return __jsx(Card, {\n      bg: \"danger\",\n      className: \"mb-3 shadow text-white\"\n    }, __jsx(Card.Header, null, __jsx(\"h3\", {\n      className: \"m-3 font-weight-bold\"\n    }, \"Attention: Polling locations not found in database.\")), __jsx(Card.Body, null, __jsx(\"h5\", {\n      className: \"m-3\"\n    }, \"Please contact your state's Secretary of State office to ask where your local polling location is located\"), __jsx(Link, {\n      href: \"https://www.usa.gov/election-office\"\n    }, __jsx(\"a\", {\n      className: \"m-3 font-weight-bold\",\n      style: {\n        textTransform: 'uppercase',\n        color: 'black'\n      },\n      target: \"_blank\"\n    }, __jsx(\"div\", {\n      className: \"text-center\"\n    }, __jsx(\"i\", {\n      className: \"fas fa-info-circle fa-2x\"\n    }), \" \\xA0Click here to search for your state\\xA0\", ' ', __jsx(\"i\", {\n      className: \"fas fa-question-circle fa-2x\"\n    }))))));\n  }\n\n  if (data && data !== null) {\n    const {\n      pollingLocations\n    } = data.data;\n    return __jsx(Accordion, {\n      defaultActiveKey: \"0\",\n      onClick: handleIsOpen\n    }, __jsx(Card, {\n      className: \"mb-3 shadow\"\n    }, __jsx(Accordion.Toggle, {\n      as: Card.Header,\n      eventKey: \"0\",\n      style: {\n        cursor: 'pointer'\n      }\n    }, __jsx(\"h3\", {\n      className: \"card-header bg-primary text-white\"\n    }, __jsx(\"span\", {\n      className: \"text-left\"\n    }, \"Available Polling Location(s) \\xA0\"), __jsx(\"span\", {\n      className: \"float-right\"\n    }, isOpen && __jsx(\"i\", {\n      className: \"fas fa-times-circle\"\n    }), !isOpen && __jsx(\"i\", {\n      className: \"fas fa-plus-circle\"\n    })))), __jsx(Accordion.Collapse, {\n      eventKey: \"0\"\n    }, __jsx(Card.Body, null, pollingLocations.length > 0 && __jsx(Card, {\n      className: \"m-3\"\n    }, pollingLocations.map((location, idx) => __jsx(Fragment, {\n      key: idx\n    }, __jsx(\"div\", {\n      className: \"card-header\",\n      style: {\n        fontFamily: 'Righteous, sans-serif'\n      }\n    }, __jsx(\"h3\", {\n      className: \"card-title\"\n    }, location.address.locationName)), __jsx(\"div\", {\n      className: \"card-body text-center\"\n    }, __jsx(\"h3\", {\n      className: \"card-text\"\n    }, \"Address:\"), __jsx(\"div\", {\n      className: \"display-4 font-weight-bold\"\n    }, __jsx(\"p\", {\n      className: \"card-text\"\n    }, location.address.line1), __jsx(\"p\", {\n      className: \"card-text\"\n    }, location.address.line2), __jsx(\"p\", {\n      className: \"card-text\"\n    }, location.address.city, \", \", location.address.state, ' ', location.address.zip))), __jsx(\"div\", {\n      className: \"card-footer\"\n    }, __jsx(\"h3\", {\n      className: \"card-title text-center\"\n    }, \"Location hours and information:\"), __jsx(\"div\", {\n      className: \"font-weight-bold\"\n    }, __jsx(\"p\", {\n      className: \"card-text\"\n    }, location.pollingHours)), __jsx(\"div\", {\n      className: \"card-body\"\n    }, __jsx(\"p\", {\n      className: \"card-title\"\n    }, \"Source: \", location.sources[0].name), location.sources[0].official && __jsx(\"p\", {\n      className: \"card-text\"\n    }, \"(Verified source) \")))))), pollingLocations.length < 0 && __jsx(\"div\", {\n      className: \"jumbotron\"\n    }, __jsx(\"p\", null, \"No polling locations shown at this time\"))))));\n  }\n};\n\nexport default PollingLocations;","map":null,"metadata":{},"sourceType":"module"}